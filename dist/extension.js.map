{"version":3,"file":"extension.js","mappings":"yvBAAA,kBAGA,oBAAyBA,GACrB,MAAMC,EAAsB,IAAIC,EAChCC,EAAOC,OAAOC,yBAAyB,kBAAmBJ,GAC1DE,EAAOG,SAASC,gBAAgB,2BAA2B,IAAMN,EAAoBO,YACrFC,aAAY,IAAMR,EAAoBO,WAAW,IACrD,EAEA,MAAMN,EAIMQ,qBAAgF,IAAIP,EAAOQ,aAC1FC,oBAAwEC,KAAKH,qBAAqBI,MAE3G,OAAAN,GACIK,KAAKH,qBAAqBK,MAC9B,CAEA,WAAAC,CAAYC,GACR,OAAOA,CACX,CAEA,WAAAC,GACI,MAAMC,EAAcC,QAAQD,cAAcE,SAAW,KAAO,KACtDC,EAAY,IAAInB,EAAOoB,SAAS,iBAAiBJ,EAAYK,QAAQ,SACrEC,EAAc,IAAItB,EAAOoB,SAAS,2BAA4BpB,EAAOuB,yBAAyBC,MACpGF,EAAYG,QAAU,CAAEA,QAAS,0BAA2BC,MAAO,cAGnE,MAAMC,EAAa3B,EAAO2B,WAAWC,IAAIC,KAAIC,GACzC,IAAI9B,EAAOoB,SAAS,GAAGU,EAAUC,YAAYC,iBAM3CC,EAAwBjC,EAAO2B,WAAWC,IAAIC,KAAIC,GACpD,IAAI9B,EAAOoB,SAAS,MAAMU,EAAUC,YAAYC,mBAAmBF,EAAUI,mBAKjF,OAA0B,IAAtBP,EAAWQ,OACJC,QAAQC,QAAQ,CAAClB,EAAWG,EAAa,IAAItB,EAAOoB,SAAS,mCAG7DgB,QAAQC,QAAQ,CAAClB,EAAWG,KAAgBW,EAAsBK,MAAM,EAAG,IAK1F,E,UCtDJC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://vscode-ram-monitor/./src/extension.ts","webpack://vscode-ram-monitor/external commonjs \"vscode\"","webpack://vscode-ram-monitor/webpack/bootstrap","webpack://vscode-ram-monitor/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\n\nexport function activate(context: vscode.ExtensionContext) {\n    const memoryUsageProvider = new MemoryUsageProvider();\n    vscode.window.registerTreeDataProvider('memoryUsageView', memoryUsageProvider);\n    vscode.commands.registerCommand('memoryUsageView.refresh', () => memoryUsageProvider.refresh());\n    setInterval(() => memoryUsageProvider.refresh(), 10000); // Actualizaci칩n autom치tica cada 10 segundos\n}\n\nclass MemoryUsageProvider implements vscode.TreeDataProvider<vscode.TreeItem> {\n    // private _onDidChangeTreeData: vscode.EventEmitter<vscode.TreeItem | undefined> = new vscode.EventEmitter<vscode.TreeItem | undefined>();\n    // readonly onDidChangeTreeData: vscode.Event<vscode.TreeItem | undefined> = this._onDidChangeTreeData.event;\n\n    private _onDidChangeTreeData: vscode.EventEmitter<vscode.TreeItem | undefined | void> = new vscode.EventEmitter<vscode.TreeItem | undefined | void>();\n    readonly onDidChangeTreeData: vscode.Event<vscode.TreeItem | undefined | void> = this._onDidChangeTreeData.event;\n\n    refresh(): void {\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element: vscode.TreeItem): vscode.TreeItem {\n        return element;\n    }\n\n    getChildren(): Thenable<vscode.TreeItem[]> {\n        const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024; // Convertir a MB\n        const usageItem = new vscode.TreeItem(`Memory Usage: ${memoryUsage.toFixed(2)} MB`);\n        const refreshItem = new vscode.TreeItem(\"Actualizar Memoria Usada\", vscode.TreeItemCollapsibleState.None);\n        refreshItem.command = { command: 'memoryUsageView.refresh', title: \"Actualizar\" };\n\n        // Obtener la lista de extensiones instaladas\n        const extensions = vscode.extensions.all.map(extension =>\n            new vscode.TreeItem(`${extension.packageJSON.displayName}`) // Puedes usar `extension.packageJSON.displayName` para un nombre m치s amigable\n        );\n\n        // obtengo la cantidad de ram usada por cada extension y muestro solo las 5 primeras y le pongo enumero al lado\n  \n\n        const memoryUsageExtensions = vscode.extensions.all.map(extension =>\n            new vscode.TreeItem(`-. ${extension.packageJSON.displayName}:RAM ${extension.extensionKind}`) // Puedes usar `extension.packageJSON.displayName` para un nombre m치s amigable\n        );\n\n\n        // verifico si hay extensiones instaladas\n        if (extensions.length === 0) {\n            return Promise.resolve([usageItem, refreshItem, new vscode.TreeItem(\"No hay extensiones instaladas\")]);\n        } \n            // solo imprimo 5 extensiones instaladas en el editor y le pongo al lado la cantidad de ram que usa cada una\n            return Promise.resolve([usageItem, refreshItem, ...memoryUsageExtensions.slice(0, 5)]);\n            //return Promise.resolve([usageItem, refreshItem, ...extensions.slice(0, 5)]);\n            //return Promise.resolve([usageItem, refreshItem, ...extensions]);\n            //return Promise.resolve([usageItem, refreshItem]);\n       \n    }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["context","memoryUsageProvider","MemoryUsageProvider","vscode","window","registerTreeDataProvider","commands","registerCommand","refresh","setInterval","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","fire","getTreeItem","element","getChildren","memoryUsage","process","heapUsed","usageItem","TreeItem","toFixed","refreshItem","TreeItemCollapsibleState","None","command","title","extensions","all","map","extension","packageJSON","displayName","memoryUsageExtensions","extensionKind","length","Promise","resolve","slice","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}